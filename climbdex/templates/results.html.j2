<!DOCTYPE html>
<html>

<head>
  {% include 'head.html.j2'%}

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
    crossorigin="anonymous"></script>

  <style>
    #div-results-list {
      max-height: 800px;
      overflow-y: scroll;
    }

    .fw-light {
      font-size: 0.9em;
    }

    /* simulate button click for swipe gestures */
    .simulated-button-click {
      color: var(--bs-btn-hover-color);
      background-color: var(--bs-btn-hover-bg);
      border-color: var(--bs-btn-hover-border-color);
    }

    .star-rating {
      direction: rtl;
      display: inline-flex;
      font-size: 2rem;
    }

    .star-rating input {
      display: none;
    }

    .star-rating label {
      cursor: pointer;
      color: #ddd;
    }

    .star-rating input:checked~label {
      color: #ffd700;
    }

    .star-rating label:hover,
    .star-rating label:hover~label {
      color: #ffd700;
    }
  </style>
</head>

<body>
  <div class="container-sm text-center">
    <div class="row justify-content-md-center">
      {% include 'heading.html.j2' %}
      {% include 'alert.html.j2' %}
    </div>
    <div class="row justify-content-md-center">
      <div class="col-md-5 card p-3 g-2 vh-100">
        <h4 id="header-results-count"></h4>
        <p class="mb-3"><small><a id="anchor-back">Back to filter selection</a></small></p>
        <div class="btn-group mb-3" role="group" aria-label="Export Button Bar">
          <button type="button" class="btn btn-outline-primary" id="export-list-csv-button" onclick="exportResultsList('csv')">Export List as CSV</button>
          <button type="button" class="btn btn-outline-primary" id="export-list-json-button"  onclick="exportResultsList('json')">Export List as JSON</button>
        </div>
        <div id="div-results-list" class="list-group"></div>
      </div>
      <div class="col-md-5 card p-3 g-2 vh-100" id="div-climb">
        <div class="row g-0">
          <div class="col-2">
            <button type="button" class="btn btn-outline-primary mb-2" id="button-prev" disabled>&larr;</button>
            <br>
            <button id="button-illuminate" class="btn btn-outline-primary position-relative" type="button">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lightbulb"
                viewBox="0 0 16 16">
                <path
                  d="M2 6a6 6 0 1 1 10.174 4.31c-.203.196-.359.4-.453.619l-.762 1.769A.5.5 0 0 1 10.5 13a.5.5 0 0 1 0 1 .5.5 0 0 1 0 1l-.224.447a1 1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1 0-1 .5.5 0 0 1 0-1 .5.5 0 0 1-.46-.302l-.761-1.77a2 2 0 0 0-.453-.618A5.98 5.98 0 0 1 2 6m6-5a5 5 0 0 0-3.479 8.592c.263.254.514.564.676.941L5.83 12h4.342l.632-1.467c.162-.377.413-.687.676-.941A5 5 0 0 0 8 1" />
              </svg>
              </a>
          </div>
          <div class="col-8">
            <h4 id="header-climb-name"></h4>
            <h6 id="header-climb-setter"></h6>
            <p id="paragraph-climb-stats"></p>
          </div>
          <div class="col-2">
            <button type="button" class="btn btn-outline-primary mb-2" id="button-next" disabled>&rarr;</button>
            <br>
            <!-- Dropdown menu -->
            <button type="button" class="btn btn-outline-primary dropdown" data-toggle="dropdown"
              data-bs-toggle="dropdown" aria-expanded="false">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list"
                viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                  d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
              </svg>
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
              <li>
                <button class="dropdown-item export-climb" id="export-list-json-button" data-type="json" hidden="True">Export Climb as JSON</button>
              </li>
              <li>
                <button class="dropdown-item export-climb" id="export-list-csv-button" data-type="csv" hidden="True">Export Climb as CSV</button>
              </li>
              {% if layout_is_mirrored %}
              <li id="button-mirror-list-item">
                <button id="button-mirror" type="button" class="dropdown-item btn" data-bs-toggle="button" onclick="mirrorClimb()">
                  Mirror Climb
                </button>
              </li>
              {% endif %}
              {% if login_cookie %}
              <li><button class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#div-log-modal">Log
                  Climb
              </li>
              <li><button class="dropdown-item" href="#" data-bs-toggle="modal"
                  data-bs-target="#div-logbook-modal">Logbook
                  Entries
              </li>
              {% endif %}
              <li>
                <a id="anchor-beta" class="btn btn-outline-primary position-relative dropdown-item">Beta
                  <span id="span-beta-count" class="position-absolute badge rounded-pill bg-danger">
                    0
                  </span>
                </a>

              </li>
            </ul>
          </div>
        </div>
        <svg id="svg-climb" viewBox="0 0 0 0" xmlns="http://www.w3.org/2000/svg"></svg>
        <div class="row">
          <div class="col">
            <p id="paragraph-climb-description" class="small mt-2 d-none"></p>
          </div>
        </div>
      </div>
    </div>
    <div class="row mt-3">
      {% include 'footer.html.j2' %}
    </div>

    <!-- Log Ascent Modal -->
    <div class="modal fade" id="div-log-modal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Log an ascent:</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div>
              <h4 id="modal-climb-name"></h4>
              <p id="modal-climb-stats"></p>
            </div>
            <form id="ratingForm">
              <div class="mb-3">
                <div class="star-rating">
                  <input type="radio" id="star3" name="rating" value="3">
                  <label for="star3">&#9733;</label>
                  <input type="radio" id="star2" name="rating" value="2">
                  <label for="star2">&#9733;</label>
                  <input type="radio" id="star1" name="rating" value="1">
                  <label for="star1">&#9733;</label>
                </div>
              </div>
              <div class="btn-group mb-3 d-flex" role="group">
                <input class="btn-check" type="radio" name="attemptType" id="flash" value="flash" autocomplete="off"
                  checked>
                <label class="btn btn-outline-primary flex-fill" for="flash">Flash</label>
                <input class="btn-check" type="radio" name="attemptType" id="send" value="send" autocomplete="off">
                <label class="btn btn-outline-primary flex-fill" for="send">Send</label>
              </div>
              <div class="mb-3 pt-3" id="attemptsSection" style="display: none;">
                <div class="input-group">
                  <button class="btn btn-outline-secondary" type="button" id="decreaseAttempts">-</button>
                  <input type="text" class="form-control text-center" id="attempts" value="1 try" readonly>
                  <button class="btn btn-outline-secondary" type="button" id="increaseAttempts">+</button>
                </div>
              </div>
              <div class="mb-3 pt-3">
                <div class="input-group">
                  <button class="btn btn-outline-secondary" type="button" id="decreaseDifficulty">-</button>
                  <input type="text" class="form-control text-center" id="difficulty" value="" readonly>
                  <button class="btn btn-outline-secondary" type="button" id="increaseDifficulty">+</button>
                </div>
              </div>
              <div class="mb-3 pt-3">
                <textarea class="form-control" id="comment" rows="3"
                  placeholder="Add comments, beta, notes..."></textarea>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="button-log-ascent">Log Ascent</button>
          </div>
          <div class="alter-settings alert alert-success" role="alert">
            Ascent logged successfully!
          </div>
          <div class="alter-settings alert alert-danger" role="alert">
            An error occurred, please try again later.
          </div>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const attemptTypeRadios = document.querySelectorAll('input[name="attemptType"]');
        attemptTypeRadios.forEach(radio => {
          radio.addEventListener('change', function () {
            const attemptsSection = document.getElementById('attemptsSection');
            if (this.id === 'flash') {
              attemptsSection.style.display = 'none';
            } else {
              attemptsSection.style.display = 'block';
            }
          });
        });

        function updateAttemptsDisplay(value) {
          return value + (value === 1 ? ' try' : ' tries');
        }
        function addExportClimbClickListener(button){
          button.addEventListener('click', function () {
            exportSelectedClimb(this.getAttribute('data-type'), this.getAttribute('data-climb-uuid'));
          });
        }
        buttons = document.getElementsByClassName('export-climb');
        for (var i = 0; i < buttons.length; i++) {
          addExportClimbClickListener(buttons[i]);
        }
        document.getElementById('increaseAttempts').addEventListener('click', function () {
          const attemptsInput = document.getElementById('attempts');
          let numericValue = parseInt(attemptsInput.value);
          if (numericValue < 10) {
            attemptsInput.value = updateAttemptsDisplay(numericValue + 1);
          }
        });

        document.getElementById('decreaseAttempts').addEventListener('click', function () {
          const attemptsInput = document.getElementById('attempts');
          let numericValue = parseInt(attemptsInput.value);
          if (numericValue > 1) {
            attemptsInput.value = updateAttemptsDisplay(numericValue - 1);
          }
        });

        const gradeMapping = {
        {% for grade in grades %}
        "{{grade[1]}}": "{{grade[0]}}",
          {% endfor %}
      };

      const gradeKeys = Object.keys(gradeMapping);
      let currentGradeIndex = gradeKeys.indexOf(document.getElementById('difficulty').value);

      function difficultySlider(increase) {
        if (increase && currentGradeIndex < gradeKeys.length - 1) {
          currentGradeIndex++;
        } else if (!increase && currentGradeIndex > 0) {
          currentGradeIndex--;
        }
        const difficultyInput = document.getElementById('difficulty');
        difficultyInput.value = gradeKeys[currentGradeIndex];

        const event = new Event('change');
        difficultyInput.dispatchEvent(event);
      }

      const difficultyInput = document.getElementById('difficulty');
      currentGradeIndex = gradeKeys.indexOf(difficultyInput.value);
      if (currentGradeIndex === -1) {
        currentGradeIndex = 0; // Default to the first grade if not found
        difficultyInput.value = gradeKeys[currentGradeIndex];
      }

      document.getElementById('increaseDifficulty').addEventListener('click', function () {
        difficultySlider(true);
      });

      document.getElementById('decreaseDifficulty').addEventListener('click', function () {
        difficultySlider(false);
      });

      document.getElementById('difficulty').addEventListener('change', function () {
        currentGradeIndex = gradeKeys.indexOf(this.value);
        if (currentGradeIndex === -1) {
          currentGradeIndex = 0;
          this.value = gradeKeys[currentGradeIndex];
        }
      });

      // Reset log modal on show
      const logModal = document.getElementById('div-log-modal');
      logModal.addEventListener('show.bs.modal', function () {
        const starRadios = document.querySelectorAll('.star-rating input');
        starRadios.forEach(radio => radio.checked = false);
        document.getElementById('comment').value = '';
        document.getElementById('button-log-ascent').disabled = false;
      });
    });

      document.getElementById('button-log-ascent').addEventListener('click', function () {
        this.disabled = true; // Disable the button to prevent multiple submissions
      });


    </script>

    <!-- Logbook Entries Modal -->
    <div class="modal fade" id="div-logbook-modal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Logbook entries:</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p id="paragraph-climb-attempts"></p>
          </div>
        </div>
      </div>
    </div>
    <script src="{{url_for('static', filename='js/bluetooth.js')}}"></script>
    <script src="{{url_for('static', filename='js/common.js')}}"></script>
    <script>
      const appUrl = "{{ app_url }}";
      const colors = {{ colors | tojson}};
      const ledColors = {{ led_colors | tojson}};
      const attemptedClimbs = {{ attempted_climbs | tojson}};
      const tickedClimbs = {{ ticked_climbs | tojson}};
      const placementPositions = {{ placement_positions | tojson}};
      const gradeMapping = {{ grades | tojson }};
      drawBoard('svg-climb', {{ images_to_holds | tojson}}, {{ edge_left }}, {{ edge_right }}, {{ edge_bottom }}, {{ edge_top }});
    </script>
    <script src="{{url_for('static', filename='js/results.js')}}"></script>
    <script src="{{url_for('static', filename='js/swipe.js')}}"></script>

</body>

</html>